# -*- mode: shell-script -*-

src_file=../src/lib/libpretty.sh

prefix_cmd="
. /etc/shlib

source '$src_file'
pretty:init
"

export COLUMNS=50


##
## Elt
##

# quick check
export ansi_color=yes
try 'Elt "abcdefg" && Feed'
noerror
is out "- abcdefg" NOCOLOR NOPOS TRIM

# without color
export ansi_color=no
try 'Elt "abcdefg" ; Feed'
noerror
is out "- abcdefg" NOPOS TRIM

# without color
try '
ansi_color no
Elt "abcdefghijklmnopqrstuvxyz"
print_info "12345678901234567890"
print_info_char X
Feedback'  'size of elements are correct'
noerror
is out " - abcdefghijkl.. 12345678901234567890 [  OK  ] X
"
is out "$COLUMNS" SIZE TRIM

try '
ansi_color no
Elt "abcdefghijklmn"
print_info "12345678901234567890"
print_info_char U
Feedback'
noerror
is out " - abcdefghijklmn 12345678901234567890 [  OK  ] U
"


# with ansi_color, some data are rewritten for each event
try 'ansi_color yes
print_list_char " * " # no print
Elt "abcdefghijklmnopqrstuvxyz"
print_info "123456789012345678901"
print_status success
print_info_char Z
Feedback'
noerror
is out "* abcdefghijkl..
* abcdefghijkl.. 123456789012345678..
* abcdefghijkl.. 123456789012345678.. [  OK  ]
* abcdefghijkl.. 123456789012345678.. [  OK  ] Z
* abcdefghijkl.. 123456789012345678.. [  OK  ] Z" NOPOS NOCOLOR TRIM

##
## TEST PRESERVATION OF ERRORLEVEL THROUGH ALL print_*, Feed*
##

mkerr() {
    return $1
}

export -f mkerr

try 'mkerr 65 ; Elt "aa"'                       ; is errlvl 65
try 'mkerr 65 ; Elt "aa" ; Feed'                ; is errlvl 65
try 'mkerr 65 ; Elt "aa" , Feedback'            ; is errlvl 65
try 'mkerr 65 ; Elt "aa" ; print_info "bb"'     ; is errlvl 65
try 'mkerr 65 ; Elt "aa" ; print_info_char "d"' ; is errlvl 65

##
## Cutline
##

## 

try 'echo "abcdef" | cutline' \
    'casts a usage msg'
is err reg "^usage: cutline.*"
is errlvl 1
is out ''

try 'echo -n "abcdef" | cutline 7; echo "!"' \
    'do not cut on small msg'
noerror
is out "abcdef !
"

try 'echo "abcdefg" | cutline 7' \
    'no cut on same size msg'
noerror
is out "abcdefg" NOCOLOR

try 'echo "abcdefgh" | cutline 7' \
    'cut on larger msg'
noerror
is out "abcde.." NOCOLOR

try '
ansi_color no
echo "abcdefgh" | cutline 7' \
    'without color this is working'
noerror
is out "abcde.."

## COLOR in pattern

try '
ansi_color yes
echo "ab${BLUE}cdefg" | cutline 7' \
    'with color same size string'
noerror
is out "ab${BLUE}cdefg${NORMAL}"

try '
ansi_color yes
DEBUG=1
echo "ab${BLUE}cdefgh" | cutline 7' \
    'with color larger size is working'
noerror
is out "abcde.." NOCOLOR
is out "ab${BLUE}cde${GRAY}..${NORMAL}"

try '
ansi_color yes
DEBUG=1
echo -n "${BLUE}a${NORMAL}" | cutline 7
echo "!"' \
    'without color this is working'
noerror
is out "a      !
" NOCOLOR
is out "${BLUE}a${NORMAL}      ${NORMAL}!
"

##
## Section
##

export ansi_color=yes
try 'Section "abcdefg"
Elt Hello
Feed' \
    'with color: quick check'
noerror
is out "abcdefg
- Hello" NOCOLOR NOPOS TRIM

export ansi_color=no
try 'Section "abcdefg" ; Feed' \
    'without color: quick check'
noerror
is out "abcdefg" NOPOS NOCOLOR TRIM

export ansi_color=no
try 'Section "First Section"
Elt Hello
Section "Second Section"
Elt Bonjour
Feed' \
    'without color: changing section and element'
noerror
is out "Second Section
- Bonjour" NOPOS TRIM

export ansi_color=yes
try 'Section "First Section"
Elt Hello
Section "Second Section"
Elt Bonjour
Feed' \
    'with color: changing section and element'
noerror
is out "First Section
- Hello

Second Section
- Hello
- Bonjour" NOCOLOR NOPOS TRIM

##
## Title
##

# quick check
# export ansi_color=yes
# try 'Title test
# Section "abcdefg"
# Elt Hello
# Feed'
# noerror
# is out "

#         test

# abcdefg
#  - Hello" NOCOLOR



